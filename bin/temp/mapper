// get center
	URL url = new URL("https://130.65.132.106/sdk");
	ServiceInstance si = new ServiceInstance(url, "administrator", "12!@qwQW", true);
	Folder rootFolder = si.getRootFolder();
	/*String name = rootFolder.getName();
	System.out.println("root:" + name);*/
	
	// get datacenter
	String dcName = "DC-Team06";
	Datacenter datacenter = (Datacenter) new InventoryNavigator(rootFolder).searchManagedEntity("Datacenter", dcName);
	
	// get specific VM
	String vmName = "T06-VM01-Ubt-Ypg";
	VirtualMachine vm = (VirtualMachine) new InventoryNavigator(rootFolder).searchManagedEntity("VirtualMachine", vmName);
	
	// get Host
	String hostName = "130.65.132.182"; 
	HostSystem host = (HostSystem) new InventoryNavigator(rootFolder).searchManagedEntity("HostSystem", hostName);
	
	PerformanceManager perfMgr = si.getPerformanceManager();
	
	
	/** HashMap Declarations **/
	

	// Map of counter IDs indexed by counter name.
	// The full counter name is the hash key - group.name.ROLLUP-TYPE.
	private HashMap<String, Integer> countersIdMap = new HashMap<String, Integer>();
	

	// Map of performance counter data (PerfCounterInfo) indexed by counter ID (PerfCounterInfo.key property).
	private HashMap<Integer, PerfCounterInfo> countersInfoMap = new HashMap<Integer, PerfCounterInfo>();
	
	
	/** Creating the Map **/
	public CounterIDwithInfoMapper() {
		//Create an object specification to define the context to retrieve the PerformanceManager property.
		ObjectSpec oSpec = new ObjectSpec();
		oSpec.setObj(perfMgr.getMOR());
		
		/*
		 * Specify the property for retrieval
		 * (PerformanceManager.perfCounter is the list of counters of which the vCenter Server is aware.)
		 */
		PropertySpec pSpec = new PropertySpec();
		pSpec.setType("PerformanceManager");
		pSpec.setPathSet(new String[] {"perfCounter"});
		
		/*
		 * Create a PropertyFilterSpec and add the object and property specs to it.
		 */
		PropertyFilterSpec fSpec = new PropertyFilterSpec();
//		fSpec.getObjectSet().add(oSpec);
		fSpec.setObjectSet(new ObjectSpec[] {oSpec});
//		fSpec.getPropSet().add(pSpec);
		fSpec.setPropSet(new PropertySpec[] {pSpec});
		
		
		/*
		 * Create a list for the filter and add the spec to it.
		 */
		List<PropertyFilterSpec> fSpecList = new ArrayList<PropertyFilterSpec>();
		fSpecList.add(fSpec);
		/*
		 * Get the performance counters from the server.
		 */
		RetrieveOptions ro = new RetrieveOptions();
		RetrieveResult props = perfMgr.retrievePropertiesEx(pCollectorRef,fSpecList,ro);
		/*
		 * Turn the retrieved results into an array of PerfCounterInfo.
		 */
		PerfCounterInfo[] perfCounters;
		if (props != null) {
			for (ObjectContent oc : props.getObjects()) {
				DynamicProperty[] dps = oc.getPropSet();
				if (dps != null) {
					for (DynamicProperty dp : dps) {
					/*
					 *  DynamicProperty.val is an xsd:anyType value to be cast
					 *  to an ArrayOfPerfCounterInfo and assigned to a List<PerfCounterInfo>.
					 */
						perfCounters = ((ArrayOfPerfCounterInfo)dp.getVal()).getPerfCounterInfo();
					}
				}
			}
		}
		
		/*
		 * Cycle through the PerfCounterInfo objects and load the maps.
		 */
		for(PerfCounterInfo perfCounter : perfCounters) {
		    Integer counterId = new Integer(perfCounter.getKey());
		    /*
		     * This map uses the counter ID to index performance counter metadata.
		     */
		    countersInfoMap.put(counterId, perfCounter);
		    /*
		     * Obtain the name components and construct the full counter name,
		     * for example â€“ power.power.AVERAGE.
		     * This map uses the full counter name to index counter IDs.
		     */
		    String counterGroup = perfCounter.getGroupInfo().getKey();
		    String counterName = perfCounter.getNameInfo().getKey();
		    String counterRollupType = perfCounter.getRollupType().toString();
		    String fullCounterName = counterGroup + "." + counterName + "." + counterRollupType;
		    /*
		     * Store the counter ID in a map indexed by the full counter name.
		     */
		    countersIdMap.put(fullCounterName, counterId);
		}
	}